{"version":3,"sources":["Components/Statistics/Statistics.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","Components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","Components/Statistics/Statistics.module.css","Components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statistics","this","props","good","neutral","bad","total","positivePercentage","className","styles","Component","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","name","Section","title","children","Notification","message","App","state","leaveFeedback","e","console","log","feedback","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","floor","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gRAyCeA,E,4JApCX,WACI,MAA0DC,KAAKC,MAAvDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OACI,gCACI,gCACI,sBAAMC,UAAWC,IAAO,iBAAxB,oBACA,+BAAON,OAEX,gCACI,sBAAMK,UAAWC,IAAO,iBAAxB,uBACA,+BAAOL,OAEX,gCACI,sBAAMI,UAAWC,IAAO,iBAAxB,mBACA,+BAAOJ,OAEX,gCACI,sBAAMG,UAAWC,IAAO,iBAAxB,qBACA,+BAAOH,OAEX,gCACI,sBAAME,UAAWC,IAAO,iBAAxB,iCACA,iCAAOF,EAAP,kB,GAvBKG,a,gBCoBVC,E,4JAnBb,WACE,MAAqCV,KAAKC,MAAlCU,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBACjB,OACM,qBAAKL,UAAWC,IAAO,mBAAvB,SACDG,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAQP,UAAWC,IAAO,cAA6BO,KAAK,SAASC,QAASJ,EAAiBK,KAAOH,EAAtG,SACGA,GAD4CA,Y,GAN3BL,aCefS,E,4JAfX,WACI,MAA4BlB,KAAKC,MAAzBkB,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,OACI,gCACA,mCAAMD,KACDC,S,GANKX,aCYPY,E,4JAXX,WACI,OACA,4BAAIrB,KAAKC,MAAMqB,c,GAHIb,aCwDZc,E,4MApDXC,MAAQ,CACRtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,cAAgB,SAACC,GACfC,QAAQC,IAAIF,GACZ,IAAMG,EAAWH,EAAEI,OAAOb,KAC1B,EAAKc,UAAS,SAAAC,GACZ,OAAO,eACJH,EAAWG,EAAUH,GAAY,O,EAKxCI,mBAAqB,WAEnB,OADqBC,OAAOC,OAAO,EAAKX,OACpBY,QAAO,SAACC,EAAKR,GAAN,OAAmBQ,EAAMR,IAAU,I,EAGhES,gCAAkC,WAChC,OAAK,EAAKL,qBACFM,KAAKC,MAAO,EAAKhB,MAAMtB,KAAK,EAAK+B,qBAAsB,KADxB,M,4CAI3C,WACE,OACE,gCACE,cAAC,EAAD,CAASd,MAAM,wBAAf,SACA,cAAC,EAAD,CACER,QAAUuB,OAAOO,KAAKzC,KAAKwB,OAC3BZ,gBAAkBZ,KAAKyB,kBAGzB,cAAC,EAAD,CAASN,MAAM,aAAf,SACGnB,KAAKiC,qBACJ,cAAC,EAAD,CACE/B,KAAMF,KAAKwB,MAAMtB,KACjBC,QAASH,KAAKwB,MAAMrB,QACpBC,IAAKJ,KAAKwB,MAAMpB,IAChBC,MAAOL,KAAKiC,qBACZ3B,mBAAoBN,KAAKsC,oCAE3B,cAAC,EAAD,CAAchB,QAAQ,+B,GA7Cdb,aCMHiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,gBAAgB,oC,kBCAlCD,EAAOC,QAAU,CAAC,kBAAkB,yCAAyC,aAAa,uC","file":"static/js/main.97f2b546.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./Statistics.module.css\"\r\n\r\nclass Statistics extends Component {\r\n    render() {\r\n        const { good, neutral, bad, total, positivePercentage } = this.props;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <span className={styles[\"feedback-type\"]}>Good: </span>\r\n                    <span>{good}</span>\r\n                </div>\r\n                <div>\r\n                    <span className={styles[\"feedback-type\"]}>Neutral: </span>\r\n                    <span>{neutral}</span>\r\n                </div>\r\n                <div>\r\n                    <span className={styles[\"feedback-type\"]}>Bad: </span>\r\n                    <span>{bad}</span>\r\n                </div>\r\n                <div>\r\n                    <span className={styles[\"feedback-type\"]}>Total: </span>\r\n                    <span>{total}</span>\r\n                </div>\r\n                <div>\r\n                    <span className={styles[\"feedback-type\"]}>Positive feedback: </span>\r\n                    <span>{positivePercentage} %</span>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number\r\n}\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./FeedbackOptions.module.css\"\r\n\r\nclass FeedbackOptions extends Component {\r\n  render() {\r\n    const { options, onLeaveFeedback } = this.props;\r\n    return (\r\n          <div className={styles[\"options-wrapper\"]}>\r\n        {options.map((option) => (\r\n          <button className={styles[\"option-btn\"]} key={ option} type=\"button\" onClick={onLeaveFeedback} name ={option}>\r\n            {option}\r\n          </button>\r\n            ))}\r\n      </div> \r\n        )\r\n    }\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func\r\n}\r\n\r\nexport default FeedbackOptions;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Section extends Component {\r\n    render() {\r\n        const { title, children } = this.props;\r\n        return (\r\n            <div>\r\n            <h1> {title}</h1>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string\r\n}\r\n\r\nexport default Section","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n \r\nclass Notification extends Component {\r\n    render() {\r\n        return (\r\n        <p>{this.props.message}</p>\r\n    )\r\n}\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string\r\n}\r\n\r\nexport default Notification","import React, { Component } from 'react';\nimport Statistics from \"./Components/Statistics\";\nimport FeedbackOptions from \"./Components/FeedbackOptions\";\nimport Section from \"./Components/Section\";\nimport Notification from \"./Components/Notification\";\n\nclass App extends Component {\n    state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n \n  leaveFeedback = (e) => {\n    console.log(e)\n    const feedback = e.target.name;\n    this.setState(prevState => {\n      return {\n        [feedback]: prevState[feedback] + 1\n      }})\n  }\n\n  \n  countTotalFeedback = () => {\n    const allFeedbacks = Object.values(this.state);\n    return allFeedbacks.reduce((acc, feedback) => acc + feedback, 0)\n  }\n\n  countPositiveFeedbackPercentage = () => {\n    if (!this.countTotalFeedback()) return null;\n    return (Math.floor((this.state.good/this.countTotalFeedback())*100))\n  }\n\nrender() {\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n      <FeedbackOptions \n        options={ Object.keys(this.state) }\n        onLeaveFeedback={ this.leaveFeedback }\n      />\n      </Section>\n      <Section title=\"Statistics\">\n        {this.countTotalFeedback() ?\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          /> :\n          <Notification message=\"No feedback given\" />}\n      </Section>\n      \n      \n    </div>\n  )\n}\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback-type\":\"Statistics_feedback-type__3bg0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options-wrapper\":\"FeedbackOptions_options-wrapper__29Cx5\",\"option-btn\":\"FeedbackOptions_option-btn__1kPe4\"};"],"sourceRoot":""}